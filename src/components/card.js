
export function createCard(userId, cardData, deleteCard, likeCard, handleImageClick, openConfirmPopup, confirmPopup, likeCardRequest,
  dislikeCardRequest) {
  const cardTemplate = document.querySelector("#card-template").content;
  const cardElement = cardTemplate.cloneNode(true).querySelector(".card");

  const cardImage = cardElement.querySelector(".card__image");
  const cardTitle = cardElement.querySelector(".card__title");
  const deleteButton = cardElement.querySelector(".card__delete-button");
  const likeButton = cardElement.querySelector(".card__like-button");
  const likeCount = cardElement.querySelector(".card__like-count");

  const defaultImage = "../images/card_1.jpg";

  cardImage.src = cardData.link;
  cardImage.alt = cardData.name;
  cardTitle.textContent = cardData.name;
  likeCount.textContent = cardData.likes.length;
  cardImage.src = cardData.link || defaultImage;


  //–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫
  if (cardData.likes.some(like => like._id === userId)) {
    likeButton.classList.add("card__like-button_is-active");
  }

  //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
  if (cardData.owner && cardData.owner._id !== userId) {
    deleteButton.remove();
  } else {
    deleteButton.addEventListener("click", () => {
    deleteCard(cardElement, cardData._id, openConfirmPopup, confirmPopup);
  });
}

  //–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –ª–∞–π–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  likeButton.addEventListener("click", () => likeCard(likeButton, likeCount, cardData._id, userId, likeCardRequest,
    dislikeCardRequest));
  cardImage.addEventListener("click", () => handleImageClick(cardData));

   // –î–æ–±–∞–≤–ª—è–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ dataset
   cardElement.dataset.ownerId = cardData.owner._id;

  return cardElement;
}

export function deleteCard(cardElement, cardId, openConfirmPopup, confirmPopup) {

  if (!openConfirmPopup || !confirmPopup) {
    console.error("–û—à–∏–±–∫–∞: openConfirmPopup –∏–ª–∏ confirmPopup –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã!");
    return;
  }

  openConfirmPopup(cardId, cardElement, confirmPopup); // –ü–µ—Ä–µ–¥–∞—ë–º pop-up —è–≤–Ω–æ
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∞–π–∫–∞

export function likeCard(likeButton, likeCount, cardId, userId, likeCardRequest, dislikeCardRequest) {
  if (!cardId) {
    console.error("–û—à–∏–±–∫–∞: cardId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!");
    return;
  }

  console.log(`–õ–∞–π–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}, cardId: ${cardId}`);

  const isLiked = likeButton.classList.contains("card__like-button_is-active");

  // üìå –í—ã–±–∏—Ä–∞–µ–º, –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é API –≤—ã–∑—ã–≤–∞—Ç—å
  const request = isLiked ? dislikeCardRequest : likeCardRequest;

  request(cardId)
    .then(updatedCard => {
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤:", updatedCard.likes);

      likeCount.textContent = updatedCard.likes.length;

      if (updatedCard.likes.some(like => like._id === userId)) {
        likeButton.classList.add("card__like-button_is-active");
      } else {
        likeButton.classList.remove("card__like-button_is-active");
      }
    })
    .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏:", err));
}


